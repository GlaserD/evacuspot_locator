<h1>Your Closest Evacuspots Are:</h1>

  <div id="spot-summary">
  </div>

<script type="text/javascript">
  function initMatrix(){
    var origin = new google.maps.LatLng(<%= origin_lat %>, <%= origin_lng %>);
    var destinations = [];

    <% evacuspots.each do |spot| %>
      destinations.push(new google.maps.LatLng(<%= spot[:latitude] %>, <%= spot[:longitude] %>))
    <% end %>

    var service = new google.maps.DistanceMatrixService();
    service.getDistanceMatrix(
      {
        origins: [origin],
        destinations: destinations,
        travelMode: google.maps.TravelMode.<%= travel_mode %>,
        // TODO: take traffic into account
        // drivingOptions: DrivingOptions,
        unitSystem: google.maps.UnitSystem.IMPERIAL
        // TODO: maybe use this because of contraflow
        // avoidHighways: Boolean,
      }, callback);
  }

  function callback(response, status) {
    // See Parsing the Results for
    // the basics of a callback function.
    if (status == google.maps.DistanceMatrixStatus.OK) {
      // TODO: refactor to not create new arrays - preserve last shortest distance and check items between than and shortest current
      var rawResults = response.rows[0].elements;
      var top3 = [];
      var remaining = rawResults;
      var shortestIndex, topItem;

      // Save index of the result in the result object
      for (var i = 0; i < rawResults.length; i++){
        rawResults[i].index = i;
      }

      // Get the top 3 shortest destinations by distance
      // TODO: switch to time for driving and public transit
      for (var i = 0; i < 3; i++) {
        shortestIndex = 0;

        remaining.forEach(function(element, index){
          if (element.distance.value < rawResults[shortestIndex].distance.value){
            shortestIndex = index;
          }
        });

        // Put the shortest item in the top 3 list
        topItem = remaining[shortestIndex]
        top3.push(topItem);

        // Delete the shortest item from remaining
        var index = remaining.indexOf(topItem);
        if (index > -1) {
          remaining.splice(index, 1);
        }
      }

      console.log(top3);
      renderTop3(top3);
    }
  }

  function renderTop3(top3){
    var string = '';
    var evacuspots = <%= evacuspots_json %>;

    top3.forEach(function(e, i){
      string += "<h3>" + evacuspots[e.index].name + "</h3>" +
        "<p>" + evacuspots[e.index].address + "</p>" +
        "<p><strong>Distance:</strong> " + e.distance.text + "<p>" +
        "<a href='/directions?spot=" + e.index + "&mode=<%= travel_mode %>'>Get Directions</a>"
    });

    document.getElementById('spot-summary').innerHTML = string;
  }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&callback=initMatrix" async defer></script>
